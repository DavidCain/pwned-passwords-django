# This is a configuration file for running tests, linters and other
# code-quality checks, using Tox (https://tox.readthedocs.io/), which
# allows configuring and automatically running many different test
# environments and checks, each in a separate Python virtual
# environment (and each potentially using a different version of
# Python).
#
# Using this file requires having tox installed -- "pip install tox"
# or refer to Tox's own documentation -- and a functioning
# installation of at least one targeted Python version. Running "tox"
# with no command-line arguments will attempt to run all environments
# against all targeted Python versions, and will fail if any Python
# versions are missing. To select only certain test environments to
# run, use the "-e" command-line flag and pass either a single
# environment name, or a comma-separated list of environment names. To
# see all available environments with their descriptions, run:
# "tox -v 1 --listenvs"


# Base configuration: list of environments and Python versions.
################################################################################

# Environment matrix.
[tox]
envlist =
  {py36,py37,py38,py39}-django{22,30,31}
  black
  check-description
  check-manifest
  docs
  flake8
  isort
  spelling

# Configuration for running on GitHub Actions via tox-gh-actions.
[gh-actions]
python =
  3.6: py36
  3.7: py37
  3.8: py38
  3.9: py39, black, check-description, check-manifest, docs, flake8, isort, spelling


# Resuable command sets. Test environments can invoke these to avoid
# the need to copy/paste common lists of commands.
################################################################################

# These are invoked by each test environment after the main test/check
# has run, and clean up any temporary files or other artifacts (such
# as Python bytecode, packaging metadata, and tool-data caches) left
# behind by the test run, ensuring a clean directory tree for the next
# run.
[cleanup]
commands =
  find {toxinidir}/tests -type f -name "*.pyc" -delete
  find {toxinidir}/tests -type d -name "__pycache__" -delete
  find {toxinidir}/src -type f -name "*.pyc" -delete
  find {toxinidir}/src -type d -name "__pycache__" -delete
  find {toxinidir}/src -type f -path "*.egg-info*" -delete
  find {toxinidir}/src -type d -path "*.egg-info" -delete
  rm -f {toxinidir}/.coverage

# This is invoked by each test environment before the main test/check,
# and ensures the virtual environment is using the latest version of
# pip rather than whatever version was originally bundled with that
# virtualenv's Python install.
[pipupgrade]
commands =
  {envpython} -m pip install --upgrade pip


# The base test environment -- runs the unit test suite with coverage.
################################################################################
[testenv]
description = Run tests with coverage report.
whitelist_externals =
  find
  rm
# Python silences deprecation warnings by default, but we want to see
# them during test runs.
setenv =
    PYTHONWARNINGS=once::DeprecationWarning
commands =
  {[pipupgrade]commands}
  coverage run --source pwned_passwords_django runtests.py
  coverage report -m
  {[cleanup]commands}
deps =
  coverage
  django22: Django>=2.2,<3.0
  django30: Django>=3.0,<3.1
  django31: Django>=3.1,<3.2


# Documentation checks.
################################################################################

# Runs an HTML build of the documentation, and fails if there's an
# error in building it.
[testenv:docs]
description = Check that the documentation can build.
basepython = python3.9
changedir = {toxinidir}/docs
commands =
  {[pipupgrade]commands}
  sphinx-build -b html -d {envtmpdir}/doctrees . {envtmpdir}/html
  {[cleanup]commands}
deps =
  sphinx
  sphinx_rtd_theme

# Runs a spelling checker over the documentation, and if misspelled
# words are found, fails the build and outputs a list of
# them. Requires the 'enchant' C library preinstalled on the target
# system.
[testenv:spelling]
description = Spell-check documentation.
basepython = python3.9
changedir = {toxinidir}/docs
# This is the only env where we silence deprecation warnings, because
# we'd already catch them elsewhere and in this env we are asking
# Sphinx to promote warnings to errors in order to fail the build on
# anything caught by the spelling checker.
setenv =
    PYTHONWARNINGS=ignore::DeprecationWarning
commands =
  {[pipupgrade]commands}
  sphinx-build -W -b spelling -d {envtmpdir}/doctrees . {envtmpdir}/html
  {[cleanup]commands}
deps =
  sphinx
  sphinx_rtd_theme
  pyenchant
  sphinxcontrib-spelling


# Linters.
################################################################################

# Runs the Black code formatter over the entire code base, and fails
# if Black thinks any files need to be reformatted.
[testenv:black]
description = Check code formatting using Black.
basepython = python3.9
changedir = {toxinidir}
deps = black
commands =
  {[pipupgrade]commands}
  black --line-length 88 --check --diff {toxinidir}/src/pwned_passwords_django {toxinidir}/tests {toxinidir}/docs {toxinidir}
  {[cleanup]commands}

# Runs the flake8 linter over the entire code base, and fails if
# flake8 finds any problems.
[testenv:flake8]
description = Lint code with flake8.
changedir = {toxinidir}
deps = flake8
commands =
  {[pipupgrade]commands}
  flake8 {toxinidir}/src/pwned_passwords_django {toxinidir}/tests
  {[cleanup]commands}

# Runs the isort import linter over the entire code base, and fails if
# any problems are found.
[testenv:isort]
description = Lint imports with isort.
changedir = {toxinidir}
deps = isort
commands =
  {[pipupgrade]commands}
  isort --check-only --diff {toxinidir}/src/pwned_passwords_django {toxinidir}/tests
  {[cleanup]commands}


# Packaging checks.
################################################################################

# Builds the package and runs 'twine check' to ensure it will render
# correctly when uploaded to the Python Package Index, or fail if not.
[testenv:check-description]
description = Check that the package description will render on the Python Package Index.
basepython = python3.9
changedir = {toxinidir}
skip_install = true
deps =
  twine
commands =
  {[pipupgrade]commands}
  {envpython} -m pip wheel -w {envtmpdir}/build --no-deps .
  twine check {envtmpdir}/build/*
  {[cleanup]commands}

# Runs check-manifest, a tool that builds the package and compares the
# files in the package to the files under version control, and fails
# if any version-controlled files do not end up in the package.
[testenv:check-manifest]
description = Check that the package manifest matches version-controlled file list.
basepython = python3.9
changedir = {toxinidir}
skip_install = true
deps =
  check-manifest
commands =
  {[pipupgrade]commands}
  check-manifest --verbose
  {[cleanup]commands}
